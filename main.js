/*
***************************************
*       OPERADORES AVANZADOS          *
***************************************
*/

//--- SUGAR SYNTAX ---//
/*
Es el nombre que se le da a los operadores avanzados que funcionan como simplificaciones de tareas m√°s complejas. El operador ++ es un ejemplo de esto.
*/

//--- OPERADOR ++ ---//
/*
Operaci√≥n: Aumentar el valor de la variable en 1.
Tenemos distintas opciones para lograr lo mismo. Salvo la primera, las otras dos son ejemplos de sugar syntax, donde se aplican operadores que se crean para simplificar la tarea con mucho menos c√≥digo üëâ

let num = 10

// aumentar en 1 el valor
num = num + 1

// primera simplificacion
num += 1

// o bien
num++
*/

//--- OPERADOR TERNARIO ---//
/*
Es una simplificaci√≥n de la estructura condicional if‚Ä¶else. Es un condicional que consta s√≠ o s√≠ de tres partes: 
la condici√≥n, 
el caso de ejecuci√≥n en caso que se cumpla, 
y el caso else si no se cumple

let temperatura = 31

if (temperatura > 30) {
  alert("D√≠a caluroso!")
} else {
  alert("D√≠a agradable")
}

Tiene la siguiente sintaxis:

condicion  ?  caso1  :  caso2

El operador ternario ofrece un return impl√≠cito para cada caso.
Esto es muy √∫til cuando queremos retornar valores de forma condicional, lo cual con una estructura tradicional ser√≠a m√°s extenso. Por ejemplo:

let permiso

if (usuario.edad >= 18) {
  permiso = true
} else {
  permiso = false
}

if (permiso) {
  alert("Puede comprar cerveza")
} else {
  alert("No puede comprar")
}

Con el operador ternario podemos reducir esto a una sola l√≠nea ya que hacemos return de uno de los casos, y por lo tanto, lo asignamos en la declaraci√≥n como puede verse en la siguiente slide üëâ

const usuario = {
  nombre: "John Doe",
  edad: 22
}

// declaramos y asignamos condicionalmente
const permiso = (usuario.edad >= 18) ? true : false

// mostramos el mensaje
permiso ? alert("Puede comprar cerveza") : alert("No puede comprar")
*/

//--- OPERADOR L√ìGICO AND ---//
/*
Es una reducci√≥n de un condicional, pero trata de ejecutar (o retornar) algo s√≥lo si la condici√≥n es verdadera, reduce un if sencillo con un solo bloque de ejecuci√≥n:

const carrito = []

if (carrito.length === 0) {
  console.log("El carrito est√° vac√≠o!")
}

// con operador AND
carrito.length === 0 && console.log("El carrito est√° vac√≠o!")

Tambi√©n tienen un return impl√≠cito. En este ejemplo, si el usuario tiene edad mayor o igual que 18 se almacena una nueva fecha en la variable:

const usuario = {
  nombre: "John Doe",
  edad: 14
}

const registroIngreso = usuario.edad >= 18 && new Date()

console.log(registroIngreso)

En el caso de que la condici√≥n resulte falsa, el operador AND retornar√° false en cambio:

const usuario = {
  nombre: "John Doe",
  edad: 14
}

const registroIngreso = usuario.edad >= 18 && new Date()

console.log(registroIngreso) // FALSE
*/

//--- OPERADOR L√ìGICO OR ---//
/*
OR ( || ) es sint√°cticamente similar al anterior, con la diferencia que consta de dos operandos y no de una condici√≥n expl√≠cita: operando1 || operando2. 

A continuaci√≥n, se presenta la tabla de evaluaci√≥n de valores falsy para esclarecer c√≥mo son los returns del operador l√≥gico OR ( || ):

console.log( 0 || "Falsy")  // Falsy
console.log( 40 || "Falsy")  // 40
console.log( null || "Falsy")  // Falsy
console.log( undefined || "Falsy")  // Falsy
console.log( "Hola Mundo" || "Falsy")  // Hola Mundo
console.log( "" || "Falsy")  // Falsy
console.log( NaN || "Falsy")  // Falsy
console.log( true || "Falsy")  // true
console.log( false || "Falsy")  // Falsy

Es vers√°til para condicionar asignaciones de variables o de par√°metros sencillamente üëá

const usuario1 = {
  nombre: "John Doe",
  edad: 14
}
const usuario2 = null

console.log( usuario1 || "El usuario no existe" )
// { nombre: 'John Doe', edad: 14 }

console.log( usuario2 || "El usuario no existe" )
// El usuario no existe

Tambi√©n es √∫til para inicializar variables de forma condicionada evaluando alg√∫n valor previo üëâ

üõí Por ejemplo, para recuperar el √∫ltimo estado de un carrito de compras del usuario almacenado en localStorage al iniciar mi app podr√≠a hacer esto:

let carrito

let carritoLocalStorage = JSON.parse( localStorage.getItem('carrito') )

if (carritoLocalStorage) {
  carrito = carritoLocalStorage
} else {
  carrito = []
}

O simplificar el proceso con el operador l√≥gico OR ( || ).

const carrito = JSON.parse(localStorage.getItem('carrito')) || []
*/

//--- OPERADOR NULLISH COALESCING ---//
/*
Este Operador (??) funciona igual que el Operador OR ( || ), con la diferencia que admite m√°s valores como ‚Äòverdaderos‚Äô. En este caso, s√≥lo obtenemos nullish en dos casos:

console.log( 0 ?? "Nullish")  // 0
console.log( 40 ?? "Nullish")  // 40
console.log( null ?? "Nullish")  // Nullish
console.log( undefined ?? "Nullish")  // Nullish
console.log( "Hola Mundo" ?? "Nullish")  // Hola Mundo
console.log( "" ?? "Nullish")  // ""
console.log( NaN ?? "Nullish")  // NaN
console.log( true ?? "Nullish")  // true
console.log( false ?? "Nullish")  // false
*/

//--- ACCESO CONDICIONAL A UN OBJETO ---//
/*
Si intentamos acceder a un objeto que no existe naturalmente obtendremos un error. Pero, si usamos el operador ? sobre la referencia de un objeto para condicionar su acceso podemos tener un mejor control de errores en la ejecuci√≥n:

const usuario = null

console.log( usuario.nombre || "El usuario no existe" )
// Error: "No se pueden leer propiedades de NULL"

console.log( usuario?.nombre || "El usuario no existe")
// "El usuario no existe"

Tambi√©n puede aplicarse sobre propiedades que sean objetos para evaluar su existencia/validez y controlar los flujos del programa:

const usuario = {
  nombre: "John Doe",
  edad: 22,
  cursos: {
    javascript: "aprobado"
  }
}

console.log( usuario?.cursos?.javascript || "La propiedad no existe")
// "aprobado"
console.log( usuario?.trabajos?.coderhouse || "La propiedad no existe")
// "La propiedad no existe"
*/

/*
***************************************    *         DESESTRUCTURACI√ìN           *
***************************************
*/

/*
Muchas veces queremos acceder a propiedades de objetos y almacenarlas en variables diferentes para un posterior uso. T√≠picamente har√≠amos algo como lo siguiente para esto:

const usuario = {
    nombre: "John Doe",
    edad: 32
}

let nombre = usuario.nombre
let edad = usuario.edad

Declaramos variables y en ellas almacenamos los valores de las propiedades. Hacemos esto para trabajar con inmutabilidad, es decir utilizar esos valores sin riesgo de alterar las propiedades del objeto.
Sin embargo, podemos utilizar la desestructuraci√≥n para simplificar y agilizar este proceso. ¬øEn qu√© consiste? Es una t√©cnica que nos permite declarar variables donde guardar propiedades de un objeto de forma r√°pida y directa. 

let { prop1, prop2 } = objeto

N√≥tese las llaves a la izquierda del operador =, esto significa que estamos desestructurando un objeto. 
Quiere decir que estamos creando dos variables, prop1 y prop2, donde se almacenan las propiedades con el mismo nombre del objeto que referenciamos a la derecha. 

Es decir, los nombres de las variables deben coincidir exactamente con los nombres de las propiedades que queremos obtener del objeto. 
En el ejemplo anterior, podemos desestructurar el objeto de la siguiente forma:

const usuario = {
    nombre: "John Doe",
    edad: 32
}

const { nombre, edad } = usuario

console.log(nombre) // "John Doe"
console.log(edad) // 3

Si intentamos desestructurar una propiedad inexistente en el objeto, obtendremos undefined.

Cada propiedad que queramos desestructurar del objeto las declaramos separadas por comas.

const usuario = {
    nombre: "John Doe",
    edad: 32
}

const { telefono } = usuario // undefined

Recordemos que en este caso y en los anteriores, estamos declarando variables con los nombres nombre, edad, y tel√©fono; por lo que luego las referenciamos con este nombre.

Si queremos acceder a propiedades m√°s internas dentro de un objeto, es decir desestructurar alguna propiedad que sea a la vez un objeto, es posible hacerlo siguiendo el mismo patr√≥n.

const usuario = {
    nombre: "John Doe",
    edad: 32,
    telefono: {
        cel: 113334444,
        casa: null,
        trabajo: 113325555
    }
}

En este caso, como tel√©fono es un objeto, desestructuramos la propiedad trabajo de √©ste, dentro de la desestructuraci√≥n de usuario. N√≥tese que finalmente se terminan declarando dos variables, nombre y trabajo.

const { nombre, telefono: {trabajo} } = usuario

console.log(nombre) // "John Doe"
console.log(trabajo) // 113325555
*/

//--- ALIAS ---//
/*
Para  que la desestructuraci√≥n funcione debe haber coincidencia con los nombres de las propiedades del objeto.

Sin embargo a veces puede que los nombres de las propiedades no sean muy descriptivos para el uso que queremos darle, y por ello podemos desestructurarlas con un alias, es decir declarar la variable con un nombre alternativo tras haber desestructurado el objeto.

Esto lo hacemos simplemente con el operador : luego del nombre de la propiedad.

En este caso desestructuramos todas las propiedades de item, pero lo almacenamos en variables denominadas id, nombre, precio, a trav√©s del alias que indicamos para cada una.

const item = {
    item_id: 432,
    product_name: "Some product",
    price_per_unit: 5600
}

const {
    item_id: id,
    product_name: nombre,
    price_per_unit: precio
} = item

console.log(id) // 432
console.log(nombre) // "Some product"
console.log(precio) // 5600
*/

//--- DESESTRUCTURACI√ìN EN PAR√ÅMETROS ---//
/*
Si en una funci√≥n recibimos objetos por par√°metros, tambi√©n es posible desestructurarlos directamente en el llamado, definiendo esto al declarar la funci√≥n. 

Por ejemplo, supongamos una funci√≥n que recibe un objeto producto por par√°metro y debe trabajar con sus propiedades id y nombre.

const producto = {
    id: 10,
    nombre: "Curso Javascript",
    precio: 12500
}

const desestructurar = (item) => {
    // desestructurando dentro del bloque
    const {id, nombre} = item
    console.log(id, nombre)
}

desestructurar(producto) // 10 Curso Javascript

Sabiendo qu√© es lo que vamos a recibir y qu√© necesitamos desestructurar, podemos traducir esto con la siguiente l√≥gica:

// desestructurando lo que reciba por par√°metro
const desestructurar = ( {id, nombre} ) => {
    console.log(id, nombre)
}

desestructurar(producto) // 10 Curso Javascript

Otro ejemplo, en este caso capturando las posiciones x e y del objeto evento del click sobre la pantalla, mostrando esas posiciones por consola. 

Esto es muy √∫til cuando trabajamos con objetos grandes (como el de evento) y s√≥lo necesitamos pocas propiedades de √©ste:

window.addEventListener('click', ( {x, y} ) => {
    console.log(x, y)
})
*/

//--- DESESTRUCTURACI√ìN DE ARRAYS ---//
/*
Es posible desestructurar arrays de forma similar, usando corchetes [] en vez de llaves. La diferencia con la desestructuraci√≥n de objetos es que la de arrays es posicional. 

Es decir, declaramos las variables en orden y estas almacenan los valores de las mismas posiciones del array de referencia:

const nombres = ["Juan", "Julieta", "Carlos", "Mariela"]

const [a, b] = nombres

console.log(a) // "Juan"
console.log(b) // "Julieta"

No funciona aqu√≠ la coincidencia por nombres, sino que se toman los valores seg√∫n la posici√≥n. Las dos primeras variables que declaramos tomar√°n los valores de los dos primeros elementos del array. 
Si queremos acceder a otras posiciones, o mejor dicho omitir las primeras, podemos hacerlo dejando espacios vac√≠os con comas:

const nombres = ["Juan", "Julieta", "Carlos", "Mariela"]

// omito las dos primeras posiciones
const [,, a, b] = nombres

console.log(a) // "Carlos"
console.log(b) // "Mariela"
*/

//--- SPREAD ---//
/*
Spread ( ‚Ä¶ ) es una herramienta que nos permite, como su nombre indica, desparramar un array u objeto. En otras palabras, cambiar la forma en la que presentamos este array u objeto.
*/

//--- SPREAD DE ARRAYS ---//
/*
Si paso un array por par√°metro a alguna funci√≥n, √©sta recibe el array entero como tal üëá

const nombres = ["Juan", "Julieta", "Carlos", "Mariela"]

console.log(nombres) // ["Juan", "Julieta", "Carlos", "Mariela"]

Si en cambio enviamos un spread del array, veremos lo siguiente:

const nombres = ["Juan", "Julieta", "Carlos", "Mariela"]

// spread ... del array
console.log(...nombres) // Juan Julieta Carlos Mariela

// equivalente a:
console.log("Juan", "Julieta", "Carlo", "Mariela")

Como vimos, lo que hace el spread (...) al aplicarse sobre un array, es enviar todos sus elementos como par√°metros individuales.

Esto es √∫til cuando tenemos datos ordenados dentro de una colecci√≥n pero trabajamos con funciones que no funcionan recibiendo arrays sino una serie de par√°metros individuales, como pueden ser Math.max() o Math.min()

üß† Por ejemplo: Necesito saber cu√°l es el menor o mayor de este array de n√∫meros:

const numeros = [4, 77, 92, 10, 3, -32, 54, 11]

console.log( Math.max(numeros) ) // NaN

Con el operador spread podemos solucionar esto ya que Math.max() recibir√° cada elemento del array como un par√°metro individual:

const numeros = [4, 77, 92, 10, 3, -32, 54, 11]

console.log( Math.max(...numeros) ) // 92

Tambi√©n podemos hacer spread de un array dentro de otras estructuras que lo admitan. 
Esto nos permite, por ejemplo, replicar el contenido de un array dentro de otra estructura al desparramar su contenido dentro. 

Si lo hacemos dentro de un objeto veremos algo interesante, que cada propiedad toma como nombre el √≠ndice de los elementos üëâ

const nombres1 = ["Juan", "Julieta"]
const nombres2 = ["Carlos", "Mariela"]

// spread de los dos arrays dentro de otro
const nombres = [...nombres1, ...nombres2]

console.log(nombres) // ["Juan", "Julieta", "Carlos", "Mariela"]

// spread del array en un objeto
const nombresObj = {
    ...nombres
}

console.log(nombresObj)
// { '0': 'Juan', '1': 'Julieta', '2': 'Carlos', '3': 'Mariela' }
*/

//--- SPREAD DE OBJETOS ---//
/*
Se puede hacer spread de objetos tambi√©n, pero debe hacerse dentro de una estructura que lo permita, como otro objeto. 
Un spread aplicado sobre un objeto presentar√≠a cada par de clave-valor separado por comas, y √©sto en una funci√≥n no ser√≠a admisible, pero s√≠ puede serlo dentro de otro objeto.
Esto suele ser √∫til cuando queremos replicar o modificar estructuras de objetos, ya que nos permite primero listar todas sus propiedades y valores y luego modificar/agregar las que queramos:

const usuario1 = {
    nombre: "Juan",
    edad: 24,
    curso: "Javascript"
}

// lista todas las propiedades y valores de usuario1 dentro de otro objeto
const usuario2 = {
    ...usuario1
}

console.log(usuario2) // { nombre: 'Juan', edad: 24, curso: 'Javascript' }

const usuario3 = {
    ...usuario1,
    curso: "ReactJS",
    email: "juan@doe.com"
}

console.log(usuario3)
// { nombre: 'Juan', edad: 24, curso: 'ReactJS', email: 'juan@doe.com' }

En el √∫ltimo ejemplo vemos que agregamos una propiedad y que modificamos la propiedad curso. 

Recordemos que no podemos tener dos propiedades con el mismo nombre, y en tal caso prevalece la √∫ltima declarada, que es lo que ocurre aqu√≠. 

El spread de usuario1 lista todas las propiedades, incluida curso, dentro de usuario3, y luego la sobreescribimos con un nuevo valor.
*/

//--- REST PARAMETERS ARRAYS ---//
/*
El operador spread tambi√©n puede utilizarse dentro de la declaraci√≥n de una funci√≥n para indicar que queremos recibir una cantidad indeterminada de par√°metros.
Supongamos que quiero tener una funci√≥n para sumar cualquier cantidad de n√∫meros que reciba por par√°metro.

Puedo hacer esto con el operador spread definiendo rest parameters, lo que significa que mi funci√≥n va a recibir una cantidad indeterminada de par√°metros, pero los va a agrupar dentro de un array con el nombre que defina, y con eso trabajar√° dentro:

function sumar(...numeros) {
    console.log(numeros)
}

sumar(4, 2) // [ 4, 2 ]
sumar(10, 15, 30, 5) // [ 10, 15, 30, 5 ]

Vemos que con esta sintaxis el par√°metro ‚Ä¶n√∫meros se define como un array donde se guardan todos los argumentos enviados que coincidan con esa posici√≥n.

De esta forma podemos escribir funciones que reciban m√∫ltiples par√°metros, sin saber con precisi√≥n cu√°ntos ser√°n, pudiendo trabajarlos luego como un array dentro de la funci√≥n.

Siguiendo el ejemplo anterior, podemos tomar este array numeros y retornar la suma de todos los elementos que reciba con un reduce:

function sumar(...numeros) {
    return numeros.reduce((acc, n) => acc + n, 0)
}

console.log( sumar(4, 2) ) // 6
console.log( sumar(10, 15, 30, 5) ) // 60
console.log( sumar(100, 300, 50) ) // 450
*/